// <auto-generated />
using System;
using LeerplatformJH.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeerplatformJH.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230818170906_test16")]
    partial class test16
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LeerplatformJH.Models.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministratorId"), 1L, 1);

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Indiensttreding")
                        .HasColumnType("datetime2");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Voornaam");

                    b.HasKey("AdministratorId");

                    b.ToTable("Administrator", (string)null);

                    b.HasData(
                        new
                        {
                            AdministratorId = 1,
                            Achternaam = "Janssens",
                            Email = "Janssens.Fons@Ucll.be",
                            Indiensttreding = new DateTime(2010, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Fons"
                        },
                        new
                        {
                            AdministratorId = 2,
                            Achternaam = "Vandenbroek",
                            Email = "Vandenbroek.Tom@Ucll.be",
                            Indiensttreding = new DateTime(2012, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Tom"
                        },
                        new
                        {
                            AdministratorId = 3,
                            Achternaam = "Willems",
                            Email = "Willems.Artuur@Ucll.be",
                            Indiensttreding = new DateTime(2013, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Artuur"
                        });
                });

            modelBuilder.Entity("LeerplatformJH.Models.Docent", b =>
                {
                    b.Property<int>("DocentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocentId"), 1L, 1);

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Indiensttreding")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Voornaam");

                    b.HasKey("DocentId");

                    b.ToTable("Docent", (string)null);

                    b.HasData(
                        new
                        {
                            DocentId = 1,
                            Achternaam = "Vanneste",
                            Email = "Kim.Vanneste@Ucll.be",
                            Indiensttreding = new DateTime(2015, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Kim"
                        },
                        new
                        {
                            DocentId = 2,
                            Achternaam = "Achten",
                            Email = "Jurgen.Achten@Ucll.be",
                            Indiensttreding = new DateTime(2012, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Jurgen"
                        },
                        new
                        {
                            DocentId = 3,
                            Achternaam = "Smets",
                            Email = "Roger.Smets@Ucll.be",
                            Indiensttreding = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Roger"
                        },
                        new
                        {
                            DocentId = 4,
                            Achternaam = "Knopper",
                            Email = "Lotte.Knopper@Ucll.be",
                            Indiensttreding = new DateTime(2019, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Lotte"
                        },
                        new
                        {
                            DocentId = 5,
                            Achternaam = "Colson",
                            Email = "Maarten.Colson@Ucll.be",
                            Indiensttreding = new DateTime(2012, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Maarten"
                        });
                });

            modelBuilder.Entity("LeerplatformJH.Models.Gebruiker", b =>
                {
                    b.Property<int>("GebruikerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GebruikerId"), 1L, 1);

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UNummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GebruikerId");

                    b.ToTable("Gebruiker", (string)null);
                });

            modelBuilder.Entity("LeerplatformJH.Models.Les", b =>
                {
                    b.Property<int>("LesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LesId"), 1L, 1);

                    b.Property<int>("DocentId")
                        .HasColumnType("int");

                    b.Property<int>("LokaalId")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PlanningId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentLessenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TijdstipEinde")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TijdstipStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("VakId")
                        .HasColumnType("int");

                    b.HasKey("LesId");

                    b.HasIndex("DocentId");

                    b.HasIndex("LokaalId");

                    b.HasIndex("PlanningId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentLessenId");

                    b.HasIndex("VakId");

                    b.ToTable("Les", (string)null);

                    b.HasData(
                        new
                        {
                            LesId = 1,
                            DocentId = 0,
                            LokaalId = 1,
                            Omschrijving = "Introductie tot de lineaire algebra",
                            StudentId = 0,
                            TijdstipEinde = new DateTime(2023, 9, 23, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            TijdstipStart = new DateTime(2023, 9, 23, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Titel = "Wiskunde1A"
                        },
                        new
                        {
                            LesId = 2,
                            DocentId = 0,
                            LokaalId = 2,
                            Omschrijving = "Marxisme",
                            StudentId = 0,
                            TijdstipEinde = new DateTime(2023, 9, 24, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            TijdstipStart = new DateTime(2023, 9, 24, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Titel = "Economie1B"
                        },
                        new
                        {
                            LesId = 3,
                            DocentId = 0,
                            LokaalId = 3,
                            Omschrijving = "Het lijdend voorwerp",
                            StudentId = 0,
                            TijdstipEinde = new DateTime(2023, 9, 25, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            TijdstipStart = new DateTime(2023, 9, 25, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Titel = "Nederlands1A"
                        },
                        new
                        {
                            LesId = 4,
                            DocentId = 0,
                            LokaalId = 5,
                            Omschrijving = "Het meewerkend voorwerp",
                            StudentId = 0,
                            TijdstipEinde = new DateTime(2023, 9, 26, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            TijdstipStart = new DateTime(2023, 9, 26, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Titel = "Nederlands1B"
                        },
                        new
                        {
                            LesId = 5,
                            DocentId = 0,
                            LokaalId = 4,
                            Omschrijving = "Inleiding",
                            StudentId = 0,
                            TijdstipEinde = new DateTime(2023, 9, 27, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            TijdstipStart = new DateTime(2023, 9, 27, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Titel = "Engels1A"
                        },
                        new
                        {
                            LesId = 6,
                            DocentId = 0,
                            LokaalId = 1,
                            Omschrijving = "Pronunciation",
                            StudentId = 0,
                            TijdstipEinde = new DateTime(2023, 9, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            TijdstipStart = new DateTime(2023, 9, 28, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Titel = "Engels1B"
                        },
                        new
                        {
                            LesId = 7,
                            DocentId = 0,
                            LokaalId = 1,
                            Omschrijving = "Wat is economie?",
                            StudentId = 0,
                            TijdstipEinde = new DateTime(2029, 9, 23, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            TijdstipStart = new DateTime(2023, 9, 29, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Titel = "Economie1A"
                        });
                });

            modelBuilder.Entity("LeerplatformJH.Models.Lokaal", b =>
                {
                    b.Property<int>("LokaalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LokaalId"), 1L, 1);

                    b.Property<int>("Capaciteit")
                        .HasColumnType("int");

                    b.Property<string>("Middelen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Omschrijving")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LokaalId");

                    b.ToTable("Lokaal", (string)null);

                    b.HasData(
                        new
                        {
                            LokaalId = 1,
                            Capaciteit = 40,
                            Middelen = "Whiteboard",
                            Omschrijving = "Stationstraat 2, 3001 Heverlee",
                            Titel = "Heverlee kleine zaal"
                        },
                        new
                        {
                            LokaalId = 2,
                            Capaciteit = 60,
                            Middelen = "Projector, Micro, Whiteboard",
                            Omschrijving = "Stationstraat 2, 3001 Heverlee",
                            Titel = "Heverlee grote zaal"
                        },
                        new
                        {
                            LokaalId = 3,
                            Capaciteit = 30,
                            Middelen = "Whiteboard",
                            Omschrijving = "Nieuwstraat 8, 3000 Leuven",
                            Titel = "Leuven kleine zaal 1"
                        },
                        new
                        {
                            LokaalId = 4,
                            Capaciteit = 70,
                            Middelen = "Projector, Micro, Whiteboard",
                            Omschrijving = "Nieuwstraat 8, 3000 Leuven",
                            Titel = "Leuven grote zaal"
                        },
                        new
                        {
                            LokaalId = 5,
                            Capaciteit = 35,
                            Middelen = "Whiteboard",
                            Omschrijving = "Nieuwstraat 8, 3000 Leuven",
                            Titel = "Leuven kleine zaal 2"
                        });
                });

            modelBuilder.Entity("LeerplatformJH.Models.Planning", b =>
                {
                    b.Property<int>("PlanningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanningId"), 1L, 1);

                    b.Property<int>("LokaalId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlanningId");

                    b.HasIndex("LokaalId");

                    b.ToTable("Planningen");
                });

            modelBuilder.Entity("LeerplatformJH.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Inschrijvingsdatum")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlanningId")
                        .HasColumnType("int");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudentId");

                    b.HasIndex("PlanningId");

                    b.ToTable("Student", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            Achternaam = "Hanssen",
                            Email = "Jan.Hanssen@hotmail.com",
                            Inschrijvingsdatum = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Jan"
                        },
                        new
                        {
                            StudentId = 2,
                            Achternaam = "Billen",
                            Email = "Wim.Billen@hotmail.com",
                            Inschrijvingsdatum = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Wim"
                        },
                        new
                        {
                            StudentId = 3,
                            Achternaam = "Broekmans",
                            Email = "Anne.Broekmans@hotmail.com",
                            Inschrijvingsdatum = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Anne"
                        },
                        new
                        {
                            StudentId = 4,
                            Achternaam = "Putzeys",
                            Email = "Sara.Putzeys@hotmail.com",
                            Inschrijvingsdatum = new DateTime(2019, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Sara"
                        },
                        new
                        {
                            StudentId = 5,
                            Achternaam = "Grosemans",
                            Email = "Steven.Grosemans@hotmail.com",
                            Inschrijvingsdatum = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Steven"
                        },
                        new
                        {
                            StudentId = 6,
                            Achternaam = "Vandeplas",
                            Email = "Elke.Vandeplas@hotmail.com",
                            Inschrijvingsdatum = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Elke"
                        },
                        new
                        {
                            StudentId = 7,
                            Achternaam = "Janssen",
                            Email = "Laura.Janssen@hotmail.com",
                            Inschrijvingsdatum = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Laura"
                        },
                        new
                        {
                            StudentId = 8,
                            Achternaam = "Omloop",
                            Email = "Willem.Omloop@hotmail.com",
                            Inschrijvingsdatum = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voornaam = "Willem"
                        });
                });

            modelBuilder.Entity("LeerplatformJH.Models.Vak", b =>
                {
                    b.Property<int>("VakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VakId"), 1L, 1);

                    b.Property<int>("DocentId")
                        .HasColumnType("int");

                    b.Property<int>("Studiepunten")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VakId");

                    b.HasIndex("DocentId");

                    b.ToTable("Vak", (string)null);

                    b.HasData(
                        new
                        {
                            VakId = 1,
                            DocentId = 1,
                            Studiepunten = 4,
                            Titel = "Engels"
                        },
                        new
                        {
                            VakId = 2,
                            DocentId = 2,
                            Studiepunten = 4,
                            Titel = "Wiskunde"
                        },
                        new
                        {
                            VakId = 3,
                            DocentId = 3,
                            Studiepunten = 3,
                            Titel = "Nederlands"
                        },
                        new
                        {
                            VakId = 4,
                            DocentId = 4,
                            Studiepunten = 3,
                            Titel = "Economie"
                        },
                        new
                        {
                            VakId = 5,
                            DocentId = 5,
                            Studiepunten = 4,
                            Titel = "Frans"
                        });
                });

            modelBuilder.Entity("LeerplatformJH.Models.VakInschrijving", b =>
                {
                    b.Property<int>("VakInschrijvingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VakInschrijvingId"), 1L, 1);

                    b.Property<int?>("GebruikerId")
                        .HasColumnType("int");

                    b.Property<int?>("Goedkeuring")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentInschrijvingenId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VakId")
                        .HasColumnType("int");

                    b.HasKey("VakInschrijvingId");

                    b.HasIndex("GebruikerId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentInschrijvingenId");

                    b.HasIndex("VakId");

                    b.ToTable("Inschrijving", (string)null);

                    b.HasData(
                        new
                        {
                            VakInschrijvingId = 1,
                            StudentId = 1,
                            Titel = "Jan Hanssen Nederlands 2023",
                            VakId = 3
                        },
                        new
                        {
                            VakInschrijvingId = 2,
                            StudentId = 1,
                            Titel = "Jan Hanssen Wiskunde 2023",
                            VakId = 2
                        },
                        new
                        {
                            VakInschrijvingId = 3,
                            StudentId = 1,
                            Titel = "Jan Hanssen Engels 2023",
                            VakId = 1
                        },
                        new
                        {
                            VakInschrijvingId = 4,
                            StudentId = 2,
                            Titel = "Wim Billen Engels 2023",
                            VakId = 1
                        },
                        new
                        {
                            VakInschrijvingId = 5,
                            StudentId = 2,
                            Titel = "Wim Billen Frans 2023",
                            VakId = 5
                        },
                        new
                        {
                            VakInschrijvingId = 6,
                            StudentId = 2,
                            Titel = "Wim Billen Nederlands 2023",
                            VakId = 3
                        },
                        new
                        {
                            VakInschrijvingId = 7,
                            StudentId = 3,
                            Titel = "Anne Broekmans Economie 2023",
                            VakId = 4
                        },
                        new
                        {
                            VakInschrijvingId = 8,
                            StudentId = 3,
                            Titel = "Anne Broekmans Wiskunde 2023",
                            VakId = 2
                        },
                        new
                        {
                            VakInschrijvingId = 9,
                            StudentId = 3,
                            Titel = "Anne Broekmans Engels 2023",
                            VakId = 1
                        },
                        new
                        {
                            VakInschrijvingId = 10,
                            StudentId = 4,
                            Titel = "Sara Putzeys Engels 2023",
                            VakId = 1
                        },
                        new
                        {
                            VakInschrijvingId = 11,
                            StudentId = 4,
                            Titel = "Sara Putzeys Frans 2023",
                            VakId = 5
                        },
                        new
                        {
                            VakInschrijvingId = 12,
                            StudentId = 4,
                            Titel = "Sara Putzeys Nederlands 2023",
                            VakId = 3
                        },
                        new
                        {
                            VakInschrijvingId = 13,
                            StudentId = 5,
                            Titel = "Steven Grosemans Wiskunde 2023",
                            VakId = 2
                        },
                        new
                        {
                            VakInschrijvingId = 14,
                            StudentId = 5,
                            Titel = "Steven Grosemans Economie 2023",
                            VakId = 4
                        },
                        new
                        {
                            VakInschrijvingId = 15,
                            StudentId = 5,
                            Titel = "Steven Grosemans Frans 2023",
                            VakId = 5
                        },
                        new
                        {
                            VakInschrijvingId = 16,
                            StudentId = 6,
                            Titel = "Elke Vandeplas Engels 2023",
                            VakId = 1
                        },
                        new
                        {
                            VakInschrijvingId = 17,
                            StudentId = 6,
                            Titel = "Elke Vandeplas Nederlands 2023",
                            VakId = 3
                        },
                        new
                        {
                            VakInschrijvingId = 18,
                            StudentId = 6,
                            Titel = "Elke Vandeplas Frans 2023",
                            VakId = 5
                        },
                        new
                        {
                            VakInschrijvingId = 19,
                            StudentId = 7,
                            Titel = "Laura Janssen Wiskunde 2023",
                            VakId = 2
                        },
                        new
                        {
                            VakInschrijvingId = 20,
                            StudentId = 7,
                            Titel = "Laura Janssen Economie 2023",
                            VakId = 4
                        },
                        new
                        {
                            VakInschrijvingId = 21,
                            StudentId = 7,
                            Titel = "Laura Janssen Nederlands 2023",
                            VakId = 3
                        },
                        new
                        {
                            VakInschrijvingId = 22,
                            StudentId = 8,
                            Titel = "Willem Omloop Engels 2023",
                            VakId = 1
                        },
                        new
                        {
                            VakInschrijvingId = 23,
                            StudentId = 8,
                            Titel = "Willem Omloop Frans 2023",
                            VakId = 5
                        },
                        new
                        {
                            VakInschrijvingId = 24,
                            StudentId = 8,
                            Titel = "Willem Omloop Wiskunde 2023",
                            VakId = 2
                        });
                });

            modelBuilder.Entity("LeerplatformJH.Models.ViewModels.StudentInschrijvingen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentInschrijvingen");
                });

            modelBuilder.Entity("LeerplatformJH.Models.ViewModels.StudentLessen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LesStudentStudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LesStudentStudentId");

                    b.ToTable("StudentLessen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LeerplatformJH.Models.Les", b =>
                {
                    b.HasOne("LeerplatformJH.Models.Docent", "Docent")
                        .WithMany("Lessen")
                        .HasForeignKey("DocentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeerplatformJH.Models.Lokaal", "Lokaal")
                        .WithMany("Lessen")
                        .HasForeignKey("LokaalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeerplatformJH.Models.Planning", null)
                        .WithMany("Lessen")
                        .HasForeignKey("PlanningId");

                    b.HasOne("LeerplatformJH.Models.Student", "Student")
                        .WithMany("Lessen")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeerplatformJH.Models.ViewModels.StudentLessen", null)
                        .WithMany("Lessen")
                        .HasForeignKey("StudentLessenId");

                    b.HasOne("LeerplatformJH.Models.Vak", null)
                        .WithMany("Lessen")
                        .HasForeignKey("VakId");

                    b.Navigation("Docent");

                    b.Navigation("Lokaal");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LeerplatformJH.Models.Planning", b =>
                {
                    b.HasOne("LeerplatformJH.Models.Lokaal", "Lokaal")
                        .WithMany()
                        .HasForeignKey("LokaalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lokaal");
                });

            modelBuilder.Entity("LeerplatformJH.Models.Student", b =>
                {
                    b.HasOne("LeerplatformJH.Models.Planning", null)
                        .WithMany("Studenten")
                        .HasForeignKey("PlanningId");
                });

            modelBuilder.Entity("LeerplatformJH.Models.Vak", b =>
                {
                    b.HasOne("LeerplatformJH.Models.Docent", "Docent")
                        .WithMany()
                        .HasForeignKey("DocentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Docent");
                });

            modelBuilder.Entity("LeerplatformJH.Models.VakInschrijving", b =>
                {
                    b.HasOne("LeerplatformJH.Models.Gebruiker", null)
                        .WithMany("Vakinschrijvingen")
                        .HasForeignKey("GebruikerId");

                    b.HasOne("LeerplatformJH.Models.Student", "Student")
                        .WithMany("Vakinschrijvingen")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeerplatformJH.Models.ViewModels.StudentInschrijvingen", null)
                        .WithMany("VakInschrijvingen")
                        .HasForeignKey("StudentInschrijvingenId");

                    b.HasOne("LeerplatformJH.Models.Vak", "Vak")
                        .WithMany("VakInschrijvingen")
                        .HasForeignKey("VakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Vak");
                });

            modelBuilder.Entity("LeerplatformJH.Models.ViewModels.StudentInschrijvingen", b =>
                {
                    b.HasOne("LeerplatformJH.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LeerplatformJH.Models.ViewModels.StudentLessen", b =>
                {
                    b.HasOne("LeerplatformJH.Models.Student", "LesStudent")
                        .WithMany()
                        .HasForeignKey("LesStudentStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LesStudent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeerplatformJH.Models.Docent", b =>
                {
                    b.Navigation("Lessen");
                });

            modelBuilder.Entity("LeerplatformJH.Models.Gebruiker", b =>
                {
                    b.Navigation("Vakinschrijvingen");
                });

            modelBuilder.Entity("LeerplatformJH.Models.Lokaal", b =>
                {
                    b.Navigation("Lessen");
                });

            modelBuilder.Entity("LeerplatformJH.Models.Planning", b =>
                {
                    b.Navigation("Lessen");

                    b.Navigation("Studenten");
                });

            modelBuilder.Entity("LeerplatformJH.Models.Student", b =>
                {
                    b.Navigation("Lessen");

                    b.Navigation("Vakinschrijvingen");
                });

            modelBuilder.Entity("LeerplatformJH.Models.Vak", b =>
                {
                    b.Navigation("Lessen");

                    b.Navigation("VakInschrijvingen");
                });

            modelBuilder.Entity("LeerplatformJH.Models.ViewModels.StudentInschrijvingen", b =>
                {
                    b.Navigation("VakInschrijvingen");
                });

            modelBuilder.Entity("LeerplatformJH.Models.ViewModels.StudentLessen", b =>
                {
                    b.Navigation("Lessen");
                });
#pragma warning restore 612, 618
        }
    }
}
